"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1807],{898:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var o=s(4848),t=s(8453);const i={title:"Templates"},r=void 0,c={id:"templates",title:"Templates",description:"When you run oclif generate, you're prompted whether you want to use either CommonJS or ESM for your CLI. CommonJS modules were the original way to package JavaScript and TypeScript packages for reuse in Node.js; ESM modules are now the official standard format. Both options produce the same CLI, with the same tsconfig file, bin scripts, sample commands, and so on.",source:"@site/../docs/templates.md",sourceDirName:".",slug:"/templates",permalink:"/docs/templates",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/templates.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1748876932e3,frontMatter:{title:"Templates"},sidebar:"docs",previous:{title:"Generator Commands",permalink:"/docs/generator_commands"},next:{title:"Guides",permalink:"/docs/guides"}},d={},l=[{value:"Bin Scripts",id:"bin-scripts",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Example Commands",id:"example-commands",level:2},{value:"Example Tests",id:"example-tests",level:2}];function a(e){const n={a:"a",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["When you run ",(0,o.jsx)(n.code,{children:"oclif generate"}),", you're prompted whether you want to use either ",(0,o.jsx)(n.a,{href:"https://nodejs.org/api/modules.html",children:"CommonJS"})," or ",(0,o.jsx)(n.a,{href:"https://nodejs.org/api/esm.html",children:"ESM"})," for your CLI. CommonJS modules were the original way to package JavaScript and TypeScript packages for reuse in Node.js; ESM modules are now the official standard format. Both options produce the same CLI, with the same ",(0,o.jsx)(n.code,{children:"tsconfig"})," file, ",(0,o.jsx)(n.code,{children:"bin"})," scripts, sample commands, and so on."]}),"\n",(0,o.jsx)(n.p,{children:"Here's a brief rundown of everything that's included in your newly generated CLI."}),"\n",(0,o.jsx)(n.h2,{id:"bin-scripts",children:"Bin Scripts"}),"\n",(0,o.jsxs)(n.p,{children:["The generated CLI project contains 4 ",(0,o.jsx)(n.code,{children:"bin"})," scripts that you can use for either production or development."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"bin/run.js"})," - Run the CLI in production (macOS and Linux)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"bin/dev.js"})," - Run the CLI in development (macOS and Linux)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"bin/run.cmd"})," - Run the CLI in production (Windows)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"bin/dev.cmd"})," - Run the CLI in development (Windows)"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"bin"})," entry in your ",(0,o.jsx)(n.code,{children:"package.json"})," points to the ",(0,o.jsx)(n.code,{children:"bin/run.js"})," file, which in turn tells ",(0,o.jsx)(n.code,{children:"npm"})," to use that file when installing the CLI. If you create operating system-specific installers using ",(0,o.jsx)(n.code,{children:"oclif pack"}),", then the appropriate ",(0,o.jsx)(n.code,{children:"run"})," script is added to the final installer based on the target operating system."]}),"\n",(0,o.jsxs)(n.p,{children:["We encourage you to use the ",(0,o.jsx)(n.code,{children:"dev"})," scripts for your local development. Doing so causes oclif to auto-transpile your TypeScript at runtime so you don't have to worry about compiling your code before every command execution. The ",(0,o.jsx)(n.code,{children:"dev"})," scripts also produce more verbose warnings and errors, which makes it easier to figure out what went wrong."]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"dev.js"})," script uses ",(0,o.jsx)(n.code,{children:"ts-node"})," as the Node.js runtime. However, you can use any of the following if you prefer:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/tsx",children:"TypeScript Execute (tsx)"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://bun.sh/",children:"Bun"})}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"node"})," - If you use ",(0,o.jsx)(n.code,{children:"node"})," and ESM, make sure you're using a loader that allows it to use ESM modules, such as ",(0,o.jsx)(n.code,{children:"--loader ts-node/esm"}),". See ",(0,o.jsx)(n.a,{href:"/docs/esm",children:"ESM"})," for more information."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["For all of these Node.js runtimes, you can point the hashbang (",(0,o.jsx)(n.code,{children:"#!"}),") in the ",(0,o.jsx)(n.code,{children:"dev.js"})," and ",(0,o.jsx)(n.code,{children:"run.js"})," files to a global installation of the runtime (such as ",(0,o.jsx)(n.code,{children:"ts-node"}),") or to a locally installed one (",(0,o.jsx)(n.code,{children:"node_modules/.bin/ts-node"}),")."]}),"\n",(0,o.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsx)(n.p,{children:"The generated CLI also comes with several configuration files that you can easily modify, or even remove, to suit your needs."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:".eslintrc.json"})," - Our recommended plugins and settings for ",(0,o.jsx)(n.code,{children:"eslint"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:".eslintignore"})," - Our recommended ",(0,o.jsx)(n.code,{children:".eslintignore"})," to go with our recommend ",(0,o.jsx)(n.code,{children:"eslint"})," configuration."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:".mocharc.json"})," - Our recommended settings for ",(0,o.jsx)(n.code,{children:"mocha"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:".prettierrc.json"})," - Our recommended ",(0,o.jsx)(n.code,{children:"prettier"})," settings - uses ",(0,o.jsx)(n.a,{href:"https://github.com/oclif/prettier-config",children:(0,o.jsx)(n.code,{children:"@oclif/prettier-config"})})," as the base."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"tsconfig.json"})," - Our recommended compiler options for TypeScript projects."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"package.json"})," - Our recommended scripts, dependencies, and ",(0,o.jsx)(n.code,{children:"oclif"})," settings."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"example-commands",children:"Example Commands"}),"\n",(0,o.jsx)(n.p,{children:"The generated CLI project comes with two sample commands that you can use as a base to build your own."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"hello"})," - ",(0,o.jsx)(n.code,{children:"src/commands/hello/index.ts"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"hello world"})," - ",(0,o.jsx)(n.code,{children:"src/commands/hello/world.ts"})]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"example-tests",children:"Example Tests"}),"\n",(0,o.jsxs)(n.p,{children:["Test files for each of the sample commands are generated under the ",(0,o.jsx)(n.code,{children:"tests"})," folder."]}),"\n",(0,o.jsxs)(n.p,{children:["These tests use ",(0,o.jsx)(n.a,{href:"https://github.com/oclif/test",children:(0,o.jsx)(n.code,{children:"@oclif/test"})})," and ",(0,o.jsx)(n.a,{href:"https://www.npmjs.com/package/mocha",children:(0,o.jsx)(n.code,{children:"mocha"})}),". However, feel free to set up your tests with any testing utilities that better suit your needs."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var o=s(6540);const t={},i=o.createContext(t);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);