"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5863],{7020:(n,e,o)=>{o.r(e),o.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>g});var r=o(4848),t=o(8453);const i={title:"Logging",description:"oclif-generated logging and custom loggers"},s=void 0,a={id:"logging",title:"Logging",description:"oclif-generated logging and custom loggers",source:"@site/../docs/logging.md",sourceDirName:".",slug:"/logging",permalink:"/docs/logging",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/logging.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:175390096e4,frontMatter:{title:"Logging",description:"oclif-generated logging and custom loggers"},sidebar:"docs",previous:{title:"JSON",permalink:"/docs/json"},next:{title:"NSIS Installer Customization",permalink:"/docs/nsis-installer_customization"}},c={},g=[];function l(n){const e={a:"a",code:"code",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:["By default oclif uses ",(0,r.jsx)(e.a,{href:"https://www.npmjs.com/package/debug",children:"debug"})," to generate debug logs that can be viewed using the ",(0,r.jsx)(e.code,{children:"DEBUG"})," environment variable. To see all the logs, you can set ",(0,r.jsx)(e.code,{children:"DEBUG=oclif*"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["You can also provide oclif with a custom logger, if you prefer for oclif's logs to be sent to that instead of ",(0,r.jsx)(e.code,{children:"debug"}),"."]}),"\n",(0,r.jsx)(e.p,{children:"This is the interface that your logger must match:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"export type Logger = {\n  debug: (formatter: unknown, ...args: unknown[]) => void\n  error: (formatter: unknown, ...args: unknown[]) => void\n  info: (formatter: unknown, ...args: unknown[]) => void\n  trace: (formatter: unknown, ...args: unknown[]) => void\n  warn: (formatter: unknown, ...args: unknown[]) => void\n  child: (namespace: string) => Logger\n  namespace: string\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"And here's an example:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-typescript",children:"// oclif-logger.ts\nimport { format } from 'node:util';\nimport { Interfaces } from '@oclif/core';\nimport { Logger } from './my-cli-logger';\n\nexport const customLogger = (namespace: string): Interfaces.Logger => {\n  const myLogger = new Logger(namespace);\n  return {\n    child: (ns: string, delimiter?: string) => customLogger(`${namespace}${delimiter ?? ':'}${ns}`),\n    debug: (formatter: unknown, ...args: unknown[]) => myLogger.debug(format(formatter, ...args)),\n    error: (formatter: unknown, ...args: unknown[]) => myLogger.error(format(formatter, ...args)),\n    info: (formatter: unknown, ...args: unknown[]) => myLogger.info(format(formatter, ...args)),\n    trace: (formatter: unknown, ...args: unknown[]) => myLogger.trace(format(formatter, ...args)),\n    warn: (formatter: unknown, ...args: unknown[]) => myLogger.warn(format(formatter, ...args)),\n    namespace,\n  };\n};\n\nexport const logger = customLogger('my-cli');\n"})}),"\n",(0,r.jsx)(e.p,{children:"You now need to provide this logger to oclif so that it can use it:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"// bin/run.js\n#!/usr/bin/env node\n\nasync function main() {\n  const {execute} = await import('@oclif/core');\n  const { logger } = await import('../dist/oclif-logger.js');\n  await oclif.execute({\n    dir: import.meta.url,\n    loadOptions: {\n      root: import.meta.dirname,\n      logger,\n    },\n  });\n}\n\nawait main();\n"})}),"\n",(0,r.jsxs)(e.p,{children:["You can also provide the logger to ",(0,r.jsx)(e.code,{children:"Config"}),", in the event that you instantiate ",(0,r.jsx)(e.code,{children:"Config"})," before calling ",(0,r.jsx)(e.code,{children:"run"})," or ",(0,r.jsx)(e.code,{children:"execute"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"import {Config, run} from '@oclif/core'\nconst config = await config.load({\n  logger,\n});\n\nawait run(process.argv.slice(2), config)\n"})})]})}function d(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},8453:(n,e,o)=>{o.d(e,{R:()=>s,x:()=>a});var r=o(6540);const t={},i=r.createContext(t);function s(n){const e=r.useContext(i);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:s(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);