"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8664],{9805:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var t=o(4848),r=o(8453);const a={title:"Generator Commands"},c=void 0,i={id:"generator_commands",title:"Generator Commands",description:"Use these commands to generate the scaffoling for a new CLI, a command, or a hook. The scaffolding includes CLI configuration files, scripts, and sample TypeScript files for a simple  hello world command.",source:"@site/../docs/generator_commands.md",sourceDirName:".",slug:"/generator_commands",permalink:"/docs/generator_commands",draft:!1,unlisted:!1,editUrl:"https://github.com/oclif/oclif.github.io/tree/docs/docs/../docs/generator_commands.md",tags:[],version:"current",lastUpdatedBy:"Mike Donnalley",lastUpdatedAt:1727818303e3,frontMatter:{title:"Generator Commands"},sidebar:"docs",previous:{title:"FAQs",permalink:"/docs/faqs"},next:{title:"Templates",permalink:"/docs/templates"}},l={},s=[{value:"<code>oclif generate NAME</code>",id:"oclif-generate-name",level:2},{value:"<code>oclif generate command NAME</code>",id:"oclif-generate-command-name",level:2},{value:"<code>oclif generate hook NAME</code>",id:"oclif-generate-hook-name",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Use these commands to generate the scaffoling for a new CLI, a command, or a hook. The scaffolding includes CLI configuration files, scripts, and sample TypeScript files for a simple  ",(0,t.jsx)(n.code,{children:"hello world"})," command."]}),"\n",(0,t.jsxs)(n.p,{children:["Run each command with the ",(0,t.jsx)(n.code,{children:"--help"})," flag, but without its argument, to see the same information documented below; for example, ",(0,t.jsx)(n.code,{children:"oclif generate --help"}),"."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#oclif-generate-name",children:(0,t.jsx)(n.code,{children:"oclif generate NAME"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#oclif-generate-command-name",children:(0,t.jsx)(n.code,{children:"oclif generate command NAME"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#oclif-generate-hook-name",children:(0,t.jsx)(n.code,{children:"oclif generate hook NAME"})})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"oclif-generate-name",children:(0,t.jsx)(n.code,{children:"oclif generate NAME"})}),"\n",(0,t.jsx)(n.p,{children:"Generate a new CLI."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'USAGE\n  $ oclif generate NAME [--author <value>] [--bin <value>] [--description <value>] [--license <value>]\n    [--module-type CommonJS|ESM] [--name <value>] [--owner <value>] [--package-manager npm|yarn|pnpm] [--repository\n    <value>] [-d <value>] [-y]\n\nARGUMENTS\n  NAME  Directory name of new project.\n\nFLAGS\n  -d, --output-dir=<value>        Directory to build the CLI in.\n  -y, --yes                       Use defaults for all prompts. Individual flags will override defaults.\n      --author=<value>            Supply answer for prompt: Author\n      --bin=<value>               Supply answer for prompt: Command bin name the CLI will export\n      --description=<value>       Supply answer for prompt: Description\n      --license=<value>           Supply answer for prompt: License\n      --module-type=<option>      Supply answer for prompt: Select a module type\n                                  <options: CommonJS|ESM>\n      --name=<value>              Supply answer for prompt: NPM package name\n      --owner=<value>             Supply answer for prompt: Who is the GitHub owner of repository\n                                  (https://github.com/OWNER/repo)\n      --package-manager=<option>  Supply answer for prompt: Select a package manager\n                                  <options: npm|yarn|pnpm>\n      --repository=<value>        Supply answer for prompt: What is the GitHub name of repository\n                                  (https://github.com/owner/REPO)\n\nDESCRIPTION\n  Generate a new CLI\n\n  This will generate a fully functional oclif CLI that you can build on. It will prompt you for all the necessary\n  information to get started. If you want to skip the prompts, you can pass the --yes flag to accept the defaults for\n  all prompts. You can also pass individual flags to set specific values for prompts.\n\n  Head to oclif.io/docs/introduction to learn more about building CLIs with oclif.\n\nEXAMPLES\n  Generate a new CLI with prompts for all properties\n\n    $ oclif generate my-cli\n\n  Automatically accept default values for all prompts\n\n    $ oclif generate my-cli --yes\n\n  Supply answers for specific prompts\n\n    $ oclif generate my-cli --module-type CommonJS --author "John Doe"\n\n  Supply answers for specific prompts and accept default values for the rest\n\n    $ oclif generate my-cli --module-type CommonJS --author "John Doe" --yes\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["See code: ",(0,t.jsx)(n.a,{href:"https://github.com/oclif/oclif/blob/4.10.1/src/commands/generate.ts",children:"src/commands/generate.ts"})]})}),"\n",(0,t.jsx)(n.h2,{id:"oclif-generate-command-name",children:(0,t.jsx)(n.code,{children:"oclif generate command NAME"})}),"\n",(0,t.jsx)(n.p,{children:"Add a command to an existing CLI or plugin."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"USAGE\n  $ oclif generate command NAME [--commands-dir <value>] [--force]\n\nARGUMENTS\n  NAME  name of command\n\nFLAGS\n  --commands-dir=<value>  [default: src/commands] The directory to create the command in.\n  --force                 Overwrite existing files.\n\nDESCRIPTION\n  Add a command to an existing CLI or plugin.\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["See code: ",(0,t.jsx)(n.a,{href:"https://github.com/oclif/oclif/blob/4.10.1/src/commands/generate/command.ts",children:"src/commands/generate/command.ts"})]})}),"\n",(0,t.jsx)(n.h2,{id:"oclif-generate-hook-name",children:(0,t.jsx)(n.code,{children:"oclif generate hook NAME"})}),"\n",(0,t.jsx)(n.p,{children:"Add a hook to an existing CLI or plugin."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"USAGE\n  $ oclif generate hook NAME [--event <value>] [--force]\n\nARGUMENTS\n  NAME  Name of hook (snake_case).\n\nFLAGS\n  --event=<value>  [default: init] Event to run hook on.\n  --force          Overwrite existing files.\n\nDESCRIPTION\n  Add a hook to an existing CLI or plugin.\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.em,{children:["See code: ",(0,t.jsx)(n.a,{href:"https://github.com/oclif/oclif/blob/4.10.1/src/commands/generate/hook.ts",children:"src/commands/generate/hook.ts"})]})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>c,x:()=>i});var t=o(6540);const r={},a=t.createContext(r);function c(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);